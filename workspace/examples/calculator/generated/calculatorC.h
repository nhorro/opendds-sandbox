// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p27
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:151

#ifndef _TAO_IDL_GENERATED_CALCULATORC_PLJF0S_H_
#define _TAO_IDL_GENERATED_CALCULATORC_PLJF0S_H_


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 2 || TAO_BETA_VERSION != 0
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 
// TAO_IDL - Generated from
// be/be_visitor_root/root_ch.cpp:158


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:37

namespace Example
{
  // TAO_IDL - Generated from
  // be/be_interface.cpp:750

  

#if !defined (_EXAMPLE_CALCULATOR__VAR_OUT_CH_)
#define _EXAMPLE_CALCULATOR__VAR_OUT_CH_

  class Calculator;
  typedef Calculator *Calculator_ptr;

  typedef
    TAO_Objref_Var_T<
        Calculator
      >
    Calculator_var;
  
  typedef
    TAO_Objref_Out_T<
        Calculator
      >
    Calculator_out;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:42

  

  class  Calculator
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<Calculator>;
    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef Calculator_ptr _ptr_type;
    typedef Calculator_var _var_type;
    typedef Calculator_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static Calculator_ptr _duplicate (Calculator_ptr obj);

    static void _tao_release (Calculator_ptr obj);

    static Calculator_ptr _narrow (::CORBA::Object_ptr obj);
    static Calculator_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Calculator_ptr _nil (void);

    virtual ::CORBA::Long add (
      ::CORBA::Long a,
      ::CORBA::Long b);

    virtual ::CORBA::Long multiply (
      ::CORBA::Long a,
      ::CORBA::Long b);

    
    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:138

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    Calculator (void);

    // Concrete non-local interface only.
    Calculator (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    Calculator (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~Calculator (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    ACE_UNIMPLEMENTED_FUNC (Calculator (const Calculator &))
#if defined (ACE_HAS_CPP11)
    ACE_UNIMPLEMENTED_FUNC (Calculator (Calculator &&))
#endif /* ACE_HAS_CPP11 */
    ACE_UNIMPLEMENTED_FUNC (Calculator &operator= (const Calculator &))
#if defined (ACE_HAS_CPP11)
    ACE_UNIMPLEMENTED_FUNC (Calculator &operator= (Calculator &&))
#endif /* ACE_HAS_CPP11 */
  };
  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:36

  extern  ::CORBA::TypeCode_ptr const _tc_Calculator;


// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:65


} // module Example
// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:144

  

#if !defined (_EXAMPLE_CALCULATOR__ARG_TRAITS_)
#define _EXAMPLE_CALCULATOR__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Example::Calculator>
    : public
        Object_Arg_Traits_T<
            ::Example::Calculator_ptr,
            ::Example::Calculator_var,
            ::Example::Calculator_out,
            TAO::Objref_Traits<Example::Calculator>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:60



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_EXAMPLE_CALCULATOR__TRAITS_)
#define _EXAMPLE_CALCULATOR__TRAITS_

  template<>
  struct  Objref_Traits< ::Example::Calculator>
  {
    static ::Example::Calculator_ptr duplicate (
        ::Example::Calculator_ptr p);
    static void release (
        ::Example::Calculator_ptr p);
    static ::Example::Calculator_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Example::Calculator_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:43




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

 void operator<<= (::CORBA::Any &, Example::Calculator_ptr); // copying
 void operator<<= (::CORBA::Any &, Example::Calculator_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Example::Calculator_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:43



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Example::Calculator_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Example::Calculator_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_codegen.cpp:1666

#if defined (__ACE_INLINE__)
#include "calculatorC.inl"
#endif /* defined INLINE */

#endif /* ifndef */

